{"version":3,"sources":["expand-block.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"expand-block.js","sourcesContent":["  /**\n   * @fileOverview This file contains the expand-block library. The\n   * library adds expand/collapse functionality on HTMLElement\n   * @author Etienne Prudâ€™homme\n   * @name expand-block.js<expand-block>\n   * @version 1.1.1\n   * @license MIT\n   * Created: 2016-12-14\n   */\n\n(function () {\n    'use strict';\n\n    /**\n     * Expands a container according to its inner content (using\n     * `.expand-inner`) that was collapsed.\n     * @param {int} height\n     */\n    function _height(height) {\n        if(height === 'auto') {\n            this.style.height = 'auto';\n        } else {\n            this.style.height = height + 'px';\n        }\n    }\n\n    /**\n     * Link for subclasses shadowing.\n     */\n    HTMLElement.prototype.super = HTMLElement.prototype;\n\n    /**\n     * Expands the element and returns a {@link Promise} that resolves\n     * when the transition of the element ended.\n     * @returns {Promise} A {@link Promise} that resolves when the\n     * transition ended.\n     */\n    function _expandPromise() {\n        var that = this;\n        return new Promise(function(resolve) {\n            function handler() {\n                that.removeEventListener('transitionend', handler, false);\n                resolve();\n            }\n\n            that.addEventListener('transitionend', handler, false);\n            that.super.expand.call(that, false);\n        });\n    }\n\n    /**\n     * Expands the parents of a container according to their inner content\n     * (using `.expand-inner`) that was collapsed.\n     */\n    function _expandParents() {\n        var that = this;\n        var parents = document.getElementsByClassName('expand-block');\n        var parent;\n        var i;\n        var queue;\n\n        queue = _expandPromise.call(that);\n\n        for(i = parents.length; i--;) {\n            parent = parents[i];\n            if(parent.contains(that) && parent !== that) {\n                queue = queue.then(_expandPromise.bind(parent));\n            }\n        }\n    }\n\n    /**\n     * Expands a container according to its inner content (using\n     * `.expand-inner`) that was collapsed.\n     * @param {bool} expandParents - If set to true, expand all parents\n     * containing the `expand-block` class.\n     */\n    HTMLElement.prototype.expand = function(expandParents) {\n        var that = this;\n        var inner = that.getElementsByClassName('expand-inner')[0];\n\n        if(inner) {\n            var height = inner.offsetHeight;\n            _height.call(that, height);\n        }\n\n        if(expandParents === true) {\n            _expandParents().call(that);\n        }\n    };\n\n    /**\n     * Returns a {@link Promise} that revolves when the collapsing transition ended\n     * in the current element.\n     * @returns {Promise} A {@link Promise} that revolves when the collapsing\n     * transition ended in the current element.\n     */\n    function _promiseCollapse() {\n        var that = this;\n\n        return new Promise(function(resolve) {\n            function handler() {\n                that.removeEventListener('transitionend', handler, false);\n                resolve();\n            }\n            that.addEventListener('transitionend', handler, false);\n            that.collapse();\n        });\n    }\n\n    /**\n     * Sets the element Height to 0 (collapse the element).\n     * @param {bool} retPromise - If set to true, will return a Promise that\n     * resolves when the element collapsed (from a transition).\n     * @returns {Promise|undefined} A {@link Promise} if {@link retPromise} is set\n     * to true.\n     */\n    HTMLElement.prototype.collapse = function(retPromise) {\n        var that = this;\n\n        if(retPromise === true) {\n            return _promiseCollapse.call(that);\n        }\n\n        _height.call(this, 0);\n    };\n\n    /**\n     * Checks if the element is collapsed.\n     * @returns {Boolean} True if collapsed, otherwise false.\n     */\n    HTMLElement.prototype.isCollapsed = function() {\n        return this.style.height === '0px' || this.style.height === '' || this.style.height === 0;\n    };\n\n    /**\n     * Checks if the element is collapsed.\n     * @returns {Boolean} True if expanded, otherwise false.\n     */\n    HTMLElement.prototype.isExpanded = function() {\n        return !this.isCollapsed();\n    };\n\n}());\n// expand-block.js<expand-block> ends here\n"]}